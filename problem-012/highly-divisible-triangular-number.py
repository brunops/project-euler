# Highly divisible triangular number
# Problem 12
# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?
from math import sqrt
def number_of_divisors(n):
  divisors = 0
  square_root = int(sqrt(n))
  for i in range(1, square_root + 1):
    if n % i == 0:
      divisors += 2

  # adjust for perfect squares
  if square_root * square_root == n:
    divisors -= 1

  return divisors

def triangular_number_with_n_divisors(n):
  # init triangular number
  triangular_number = 1

  # init natural number
  natural_number = 1

  while number_of_divisors(triangular_number) < n:
    natural_number += 1
    triangular_number += natural_number

  return triangular_number


print triangular_number_with_n_divisors(500)
